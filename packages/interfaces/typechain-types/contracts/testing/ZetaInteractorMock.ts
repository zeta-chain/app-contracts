/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ZetaInterfaces {
  export type ZetaMessageStruct = {
    zetaTxSenderAddress: BytesLike;
    sourceChainId: BigNumberish;
    destinationAddress: string;
    zetaValue: BigNumberish;
    message: BytesLike;
  };

  export type ZetaMessageStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    zetaTxSenderAddress: string;
    sourceChainId: BigNumber;
    destinationAddress: string;
    zetaValue: BigNumber;
    message: string;
  };

  export type ZetaRevertStruct = {
    zetaTxSenderAddress: string;
    sourceChainId: BigNumberish;
    destinationAddress: BytesLike;
    destinationChainId: BigNumberish;
    remainingZetaValue: BigNumberish;
    message: BytesLike;
  };

  export type ZetaRevertStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    zetaTxSenderAddress: string;
    sourceChainId: BigNumber;
    destinationAddress: string;
    destinationChainId: BigNumber;
    remainingZetaValue: BigNumber;
    message: string;
  };
}

export interface ZetaInteractorMockInterface extends utils.Interface {
  functions: {
    "connector()": FunctionFragment;
    "interactorsByChainId(uint256)": FunctionFragment;
    "onZetaMessage((bytes,uint256,address,uint256,bytes))": FunctionFragment;
    "onZetaRevert((address,uint256,bytes,uint256,uint256,bytes))": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setInteractorByChainId(uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "connector"
      | "interactorsByChainId"
      | "onZetaMessage"
      | "onZetaRevert"
      | "owner"
      | "renounceOwnership"
      | "setInteractorByChainId"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "connector", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "interactorsByChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onZetaMessage",
    values: [ZetaInterfaces.ZetaMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onZetaRevert",
    values: [ZetaInterfaces.ZetaRevertStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInteractorByChainId",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "connector", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interactorsByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onZetaMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onZetaRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInteractorByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ZetaInteractorMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZetaInteractorMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    connector(overrides?: CallOverrides): Promise<[string]>;

    interactorsByChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onZetaMessage(
      zetaMessage: ZetaInterfaces.ZetaMessageStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onZetaRevert(
      zetaRevert: ZetaInterfaces.ZetaRevertStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInteractorByChainId(
      destinationChainId: BigNumberish,
      contractAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  connector(overrides?: CallOverrides): Promise<string>;

  interactorsByChainId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  onZetaMessage(
    zetaMessage: ZetaInterfaces.ZetaMessageStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onZetaRevert(
    zetaRevert: ZetaInterfaces.ZetaRevertStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInteractorByChainId(
    destinationChainId: BigNumberish,
    contractAddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    connector(overrides?: CallOverrides): Promise<string>;

    interactorsByChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    onZetaMessage(
      zetaMessage: ZetaInterfaces.ZetaMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onZetaRevert(
      zetaRevert: ZetaInterfaces.ZetaRevertStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setInteractorByChainId(
      destinationChainId: BigNumberish,
      contractAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    connector(overrides?: CallOverrides): Promise<BigNumber>;

    interactorsByChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onZetaMessage(
      zetaMessage: ZetaInterfaces.ZetaMessageStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onZetaRevert(
      zetaRevert: ZetaInterfaces.ZetaRevertStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInteractorByChainId(
      destinationChainId: BigNumberish,
      contractAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    connector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interactorsByChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onZetaMessage(
      zetaMessage: ZetaInterfaces.ZetaMessageStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onZetaRevert(
      zetaRevert: ZetaInterfaces.ZetaRevertStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInteractorByChainId(
      destinationChainId: BigNumberish,
      contractAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
